#! /usr/bin/env bash

# profile=credentials

function check_aws() {
  if ! which aws > /dev/null; then
    echo "Can't find AWS CLI. Install 'awscli' using pip."
    exit 1
  fi
  if ! aws configure list --profile $profile > /dev/null; then
    echo "Run \`aws configure --profile $profile\` to create it"
    exit 1
  fi
}

# function create_table() {
#   local table_dir=${1%/}
#   local table_name=$(basename $table_dir)
#   local role_name="${2}_cognito_authenticated"
#   if [[ ! -s ${table_dir}/table_info.json ]]; then
#     aws --profile $profile dynamodb create-table \
#       --table-name $table_name \
#       --cli-input-json "file://${table_dir}/config.json" \
#       > ${table_dir}/table_info.json
#
#     echo -n "Waiting for table creation..."
#     aws --profile $profile dynamodb describe-table --table-name "$table_name" > ${table_dir}/table_info.json
#     while [[ "$(support/jsed.py ${table_dir}/table_info.json 'Table.TableStatus')" != "ACTIVE" ]]; do
#       aws --profile $profile dynamodb describe-table --table-name "$table_name" > ${table_dir}/table_info.json
#       echo -n .
#     done
#     echo "...done!"
#   fi
#
#   local table_arn=$(support/jsed.py ${table_dir}/table_info.json 'Table.TableArn')
#   generate_table_policy ${table_arn} > ${table_dir}/role_policy.json
#   aws --profile $profile iam put-role-policy \
#     --policy-document file://${table_dir}/role_policy.json \
#     --role-name ${role_name} \
#     --policy-name ${table_name}_table_access
# }
#

function create_local_dynamo_db() {
  local table_dir=${1%/}
  echo $table_dir
  local table_name=$(basename $table_dir)
  echo $table_name
  local endpoint="http://localhost:8000"

  # if [[ ! -s ${table_dir}/table_info.json ]]; then
  if [ $# -eq 2 ]; then
    aws --profile $2 dynamodb create-table \
      --endpoint-url $endpoint \
      --table-name $table_name \
      --cli-input-json "file://${table_dir}/config.json" \
      > ${table_dir}/table_info.json
  else
    aws dynamodb create-table \
      --endpoint-url $endpoint \
      --table-name $table_name \
      --cli-input-json "file://${table_dir}/config.json" \
      > ${table_dir}/table_info.json
  fi

    # echo -n "Waiting for table creation..."
    # aws dynamodb describe-table --table-name "$table_name" > ${table_dir}/table_info.json
    # while [[ "$(support/jsed.py ${table_dir}/table_info.json 'Table.TableStatus')" != "ACTIVE" ]]; do
    #   aws dynamodb describe-table --table-name "$table_name" > ${table_dir}/table_info.json
    #   echo -n .
    # done
    # echo "...done!"
  # fi
}

function create_local_db() {
  local bots="${PWD}/dynamodb/tables/Bots"
  local acc="${PWD}/dynamodb/tables/Accounts"
  local botresults="${PWD}/dynamodb/tables/BotResults"
  local games="${PWD}/dynamodb/tables/Games"
  local results="${PWD}/dynamodb/tables/Results"

  echo "Creating tables..."
  create_local_dynamo_db $games $1
  create_local_dynamo_db $acc $1
  create_local_dynamo_db $botresults $1
  create_local_dynamo_db $bots $1
  create_local_dynamo_db $results $1
  echo "Done"
}

# function create_local_db() {
#   local bots="${PWD}/dynamodb/tables/Bots"
#   local acc="${PWD}/dynamodb/tables/Accounts"
#   local botresults="${PWD}/dynamodb/tables/BotResults"
#   local games="${PWD}/dynamodb/tables/Games"
#   local results="${PWD}/dynamodb/tables/Results"
#
#   echo "Creating tables..."
#   echo " Games..."
#   create_local_dynamo_db $games
#   echo " Accounts..."
#   create_local_dynamo_db $acc
#   echo " Bots..."
#   create_local_dynamo_db $bots
#   echo " Results..."
#   create_local_dynamo_db $results
#   echo " BotResults..."
#   create_local_dynamo_db $botresults
#   echo "Done."
# }

function drop_local_db() {
  if [ $# -eq 1 ]; then
    aws --profile $1 dynamodb delete-table --table-name "Bots" --endpoint-url http://localhost:8000
    aws --profile $1 dynamodb delete-table --table-name "Accounts" --endpoint-url http://localhost:8000
    aws --profile $1 dynamodb delete-table --table-name "BotResults" --endpoint-url http://localhost:8000
    aws --profile $1 dynamodb delete-table --table-name "Games" --endpoint-url http://localhost:8000
    aws --profile $1 dynamodb delete-table --table-name "Results" --endpoint-url http://localhost:8000
  else
    aws dynamodb delete-table --table-name "Bots" --endpoint-url http://localhost:8000
    aws dynamodb delete-table --table-name "Accounts" --endpoint-url http://localhost:8000
    aws dynamodb delete-table --table-name "BotResults" --endpoint-url http://localhost:8000
    aws dynamodb delete-table --table-name "Games" --endpoint-url http://localhost:8000
    aws dynamodb delete-table --table-name "Results" --endpoint-url http://localhost:8000
  fi
}

function create_accounts () {
  aws dynamodb create-table --endpoint-url http://localhost:8000 \
  --table-name Accounts --attribute-definitions AttributeName=cognitoId,AttributeType=S AttributeName=username,AttributeType=S \
  --key-schema AttributeName=cognitoId,KeyType=HASH AttributeName=username,KeyType=RANGE \
  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
}

function db_seeds(){
  local table_dir=${1%/}
  local table_name=$(basename $table_dir)
  if [ $# -eq 2 ]; then
    aws --profile $2 dynamodb put-item --endpoint-url http://localhost:8000 \
      --table-name $table_name \
      --item "file://${table_dir}/seed.json"
  else
    aws dynamodb put-item --endpoint-url http://localhost:8000 \
      --table-name $table_name \
      --item "file://${table_dir}/seed.json"
  fi
}

function seed_tables_local_db(){
  local bots="${PWD}/dynamodb/tables/Bots"
  local acc="${PWD}/dynamodb/tables/Accounts"
  local botresults="${PWD}/dynamodb/tables/BotResults"
  local games="${PWD}/dynamodb/tables/Games"
  local results="${PWD}/dynamodb/tables/Results"

  db_seeds $bots $1
  db_seeds $acc $1
  db_seeds $botresults
  db_seeds $games $1
  db_seeds $results
}

function help() {
  echo
  echo "Usage: fizz-aws <action> [arguments...]"
  echo
  echo "Actions:"
  echo "    create_local"
  echo "    list_local"
  echo "    drop_local"
  echo "    seed_local"
  echo
}

action=${1:-"help"}

case "$action" in
  create_local)
    create_local_db
    ;;
  list_local)
    if [ $# -eq 2 ]; then
      aws --profile $2 dynamodb list-tables --endpoint-url http://localhost:8000
    else
      aws dynamodb list-tables --endpoint-url http://localhost:8000
    fi
    ;;
  drop_local)
    drop_local_db $2
    ;;
  seed_local)
    seed_tables_local_db $2
    ;;
  create_local_with_profile)
    create_local_db $2
    ;;
  *)
    help
    ;;
esac
